'''递归乘法。 写一个递归函数，不使用 * 运算符， 实现两个正整数的相乘。可以使用加号、减号、位移，但要吝啬一些。'''

# 递归（位运算）
class Solution:
    def multiply(self, A: int, B: int) -> int:
        return (self.multiply(A << 1, B >> 1) + (A if B & 1 else 0)) if B else 0
     
    # 利用乘法器的原理，例：A*B = 4*5 = 0100 * 0101 = 4*0*2^3 + 4*1*2^2 + 4*0*2^1 + 4*1*2^0 = 20，
    # 因此利用三目运算符依次判断B当前位是否为1，然后利用位运算得出A和当前位的乘积，即 '+ A*2^(当前位)*(B&1)'，
    # 转换成递归形式即为return中的前一个括号所示；而后面的三目运算符则是判断B是否为0，如果B为0则直接返回0即可。
